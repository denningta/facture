/******************************************************************************
 * This file was generated by langium-cli 1.0.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type Markdown = BlockQuote | Bold | Header1 | Italic | ListItem | Paragraph | Warning;

export const Markdown = 'Markdown';

export function isMarkdown(item: unknown): item is Markdown {
    return reflection.isInstance(item, Markdown);
}

export interface BlockQuote extends AstNode {
    readonly $container: Inspection | Process | Section | Step | Warning;
    readonly $type: 'BlockQuote';
    text: PlainText
}

export const BlockQuote = 'BlockQuote';

export function isBlockQuote(item: unknown): item is BlockQuote {
    return reflection.isInstance(item, BlockQuote);
}

export interface Bold extends AstNode {
    readonly $container: Inspection | Process | Section | Step | Warning;
    readonly $type: 'Bold';
    text: PlainText
}

export const Bold = 'Bold';

export function isBold(item: unknown): item is Bold {
    return reflection.isInstance(item, Bold);
}

export interface DocumentType extends AstNode {
    readonly $container: Model;
    readonly $type: 'DocumentType';
    class: 'Process'
    name: string
    type: 'Instruction' | 'Specification'
}

export const DocumentType = 'DocumentType';

export function isDocumentType(item: unknown): item is DocumentType {
    return reflection.isInstance(item, DocumentType);
}

export interface Header extends AstNode {
    readonly $container: Header1;
    readonly $type: 'Header';
    text: PlainText
}

export const Header = 'Header';

export function isHeader(item: unknown): item is Header {
    return reflection.isInstance(item, Header);
}

export interface Header1 extends AstNode {
    readonly $container: Inspection | Process | Section | Step | Warning;
    readonly $type: 'Header1';
    content: Header
}

export const Header1 = 'Header1';

export function isHeader1(item: unknown): item is Header1 {
    return reflection.isInstance(item, Header1);
}

export interface Inspection extends AstNode {
    readonly $container: Model;
    readonly $type: 'Inspection' | 'InspectionQualification' | 'InspectionType';
    markdown: Array<Markdown>
    name: string
    number: number
    steps: Array<Step>
}

export const Inspection = 'Inspection';

export function isInspection(item: unknown): item is Inspection {
    return reflection.isInstance(item, Inspection);
}

export interface InspectionRef extends AstNode {
    readonly $container: Procedure;
    readonly $type: 'InspectionRef';
    reference: Reference<Inspection>
}

export const InspectionRef = 'InspectionRef';

export function isInspectionRef(item: unknown): item is InspectionRef {
    return reflection.isInstance(item, InspectionRef);
}

export interface Italic extends AstNode {
    readonly $container: Inspection | Process | Section | Step | Warning;
    readonly $type: 'Italic';
    text: PlainText
}

export const Italic = 'Italic';

export function isItalic(item: unknown): item is Italic {
    return reflection.isInstance(item, Italic);
}

export interface ListItem extends AstNode {
    readonly $container: Inspection | Process | Section | Step | Warning;
    readonly $type: 'ListItem';
    index?: number
    text: PlainText
}

export const ListItem = 'ListItem';

export function isListItem(item: unknown): item is ListItem {
    return reflection.isInstance(item, ListItem);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    documentType: DocumentType
    inspections: Array<Inspection>
    procedures: Array<Procedure>
    processes: Array<Process>
    sections: Array<Section>
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Paragraph extends AstNode {
    readonly $container: Inspection | Process | Section | Step | Warning;
    readonly $type: 'Paragraph';
    text: PlainText
}

export const Paragraph = 'Paragraph';

export function isParagraph(item: unknown): item is Paragraph {
    return reflection.isInstance(item, Paragraph);
}

export interface PlainText extends AstNode {
    readonly $container: BlockQuote | Bold | Header | Italic | ListItem | Paragraph;
    readonly $type: 'PlainText';
    text: Array<number | string>
}

export const PlainText = 'PlainText';

export function isPlainText(item: unknown): item is PlainText {
    return reflection.isInstance(item, PlainText);
}

export interface Procedure extends AstNode {
    readonly $container: Model;
    readonly $type: 'Procedure';
    name: string
    number: number
    processes: Array<InspectionRef | ProcessRef>
}

export const Procedure = 'Procedure';

export function isProcedure(item: unknown): item is Procedure {
    return reflection.isInstance(item, Procedure);
}

export interface Process extends AstNode {
    readonly $container: Model;
    readonly $type: 'Process';
    markdown: Array<Markdown>
    name: string
    number: number
    steps: Array<Step>
}

export const Process = 'Process';

export function isProcess(item: unknown): item is Process {
    return reflection.isInstance(item, Process);
}

export interface ProcessRef extends AstNode {
    readonly $container: Procedure;
    readonly $type: 'ProcessRef';
    reference: Reference<Process>
}

export const ProcessRef = 'ProcessRef';

export function isProcessRef(item: unknown): item is ProcessRef {
    return reflection.isInstance(item, ProcessRef);
}

export interface Section extends AstNode {
    readonly $container: Model | Section;
    readonly $type: 'Section';
    markdwon: Array<Markdown>
    name: string
    number: number
    subSections: Array<Section>
}

export const Section = 'Section';

export function isSection(item: unknown): item is Section {
    return reflection.isInstance(item, Section);
}

export interface Step extends AstNode {
    readonly $container: Inspection | Process;
    readonly $type: 'Step';
    markdown: Array<Markdown>
    number: number
}

export const Step = 'Step';

export function isStep(item: unknown): item is Step {
    return reflection.isInstance(item, Step);
}

export interface Warning extends AstNode {
    readonly $container: Inspection | Process | Section | Step | Warning;
    readonly $type: 'Warning';
    content: Array<Markdown>
}

export const Warning = 'Warning';

export function isWarning(item: unknown): item is Warning {
    return reflection.isInstance(item, Warning);
}

export interface InspectionQualification extends Inspection {
    readonly $container: Model;
    readonly $type: 'InspectionQualification';
    qualification: 'manufacturing' | 'quality'
}

export const InspectionQualification = 'InspectionQualification';

export function isInspectionQualification(item: unknown): item is InspectionQualification {
    return reflection.isInstance(item, InspectionQualification);
}

export interface InspectionType extends Inspection {
    readonly $container: Model;
    readonly $type: 'InspectionType';
    inspectionType: 'verification' | 'witness'
}

export const InspectionType = 'InspectionType';

export function isInspectionType(item: unknown): item is InspectionType {
    return reflection.isInstance(item, InspectionType);
}

export interface FactureAstType {
    BlockQuote: BlockQuote
    Bold: Bold
    DocumentType: DocumentType
    Header: Header
    Header1: Header1
    Inspection: Inspection
    InspectionQualification: InspectionQualification
    InspectionRef: InspectionRef
    InspectionType: InspectionType
    Italic: Italic
    ListItem: ListItem
    Markdown: Markdown
    Model: Model
    Paragraph: Paragraph
    PlainText: PlainText
    Procedure: Procedure
    Process: Process
    ProcessRef: ProcessRef
    Section: Section
    Step: Step
    Warning: Warning
}

export class FactureAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['BlockQuote', 'Bold', 'DocumentType', 'Header', 'Header1', 'Inspection', 'InspectionQualification', 'InspectionRef', 'InspectionType', 'Italic', 'ListItem', 'Markdown', 'Model', 'Paragraph', 'PlainText', 'Procedure', 'Process', 'ProcessRef', 'Section', 'Step', 'Warning'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case BlockQuote:
            case Bold:
            case Header1:
            case Italic:
            case ListItem:
            case Paragraph:
            case Warning: {
                return this.isSubtype(Markdown, supertype);
            }
            case InspectionQualification:
            case InspectionType: {
                return this.isSubtype(Inspection, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'InspectionRef:reference': {
                return Inspection;
            }
            case 'ProcessRef:reference': {
                return Process;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Inspection': {
                return {
                    name: 'Inspection',
                    mandatory: [
                        { name: 'markdown', type: 'array' },
                        { name: 'steps', type: 'array' }
                    ]
                };
            }
            case 'Model': {
                return {
                    name: 'Model',
                    mandatory: [
                        { name: 'inspections', type: 'array' },
                        { name: 'procedures', type: 'array' },
                        { name: 'processes', type: 'array' },
                        { name: 'sections', type: 'array' }
                    ]
                };
            }
            case 'PlainText': {
                return {
                    name: 'PlainText',
                    mandatory: [
                        { name: 'text', type: 'array' }
                    ]
                };
            }
            case 'Procedure': {
                return {
                    name: 'Procedure',
                    mandatory: [
                        { name: 'processes', type: 'array' }
                    ]
                };
            }
            case 'Process': {
                return {
                    name: 'Process',
                    mandatory: [
                        { name: 'markdown', type: 'array' },
                        { name: 'steps', type: 'array' }
                    ]
                };
            }
            case 'Section': {
                return {
                    name: 'Section',
                    mandatory: [
                        { name: 'markdwon', type: 'array' },
                        { name: 'subSections', type: 'array' }
                    ]
                };
            }
            case 'Step': {
                return {
                    name: 'Step',
                    mandatory: [
                        { name: 'markdown', type: 'array' }
                    ]
                };
            }
            case 'Warning': {
                return {
                    name: 'Warning',
                    mandatory: [
                        { name: 'content', type: 'array' }
                    ]
                };
            }
            case 'InspectionQualification': {
                return {
                    name: 'InspectionQualification',
                    mandatory: [
                        { name: 'markdown', type: 'array' },
                        { name: 'steps', type: 'array' }
                    ]
                };
            }
            case 'InspectionType': {
                return {
                    name: 'InspectionType',
                    mandatory: [
                        { name: 'markdown', type: 'array' },
                        { name: 'steps', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new FactureAstReflection();
